/// ---- CLIMBING ----
// Concept: use steps to build a climbing structure

let tileHeight = 0.05

// the puzzle version of CLIMBING is concept #11 - adds decorators and click event handling with puzzle accounting
let puzzleAccumulatedTotal = 0
let puzzleAccumulatedClicks = 0

// used for movement
let step = 0

// Create UI canvas and text
// see https://docs.decentraland.org/development-guide/onscreen-ui/
const uCanvas = new UICanvas() 
const uRect = new UIScrollRect(uCanvas)
//const uRect = new UIContainerRect(uCanvas)
uRect.width = 300
uRect.height = 150
uRect.hAlign = 'right'
uRect.vAlign = 'bottom'
// uRect.paddingLeft = '10%'
// uRect.paddingRight = '10%'
// uRect.paddingTop = '10%'
// uRect.paddingBottom = '10%'
// uRect.isVertical = true
// uRect.color = Color4.Gray()
uRect.backgroundColor = Color4.Gray()
uRect.opacity = 0.5

const uText = new UIText(uRect)
uText.fontSize = 16
uText.color = Color4.White()
uText.textWrapping = true
uText.width = '80%'
uText.height = '80%'
// uText.paddingTop = '10%'
// uText.paddingBottom = '10%'
uText.hAlign = 'center'
uText.vAlign = 'top'

let timerStart = null

let legMaterial = new Material()
legMaterial.hasAlpha = false
legMaterial.metallic = 1
legMaterial.roughness = 1
legMaterial.emissiveColor = Color3.FromHexString('#a0a0a0')
legMaterial.ambientColor = Color3.FromHexString('#ffffff')
legMaterial.reflectionColor = Color3.FromHexString('#ffffff')
legMaterial.albedoColor = Color3.FromHexString('#ffffff')

// let theEntities:Entity[] = new Array(64)
let theEntities = []
let theRadios = []

export class SimpleMove implements ISystem {

  update() {

    let distance = null

    // go back to 0 every 100 steps
    if(step >= 100) {
      step = 0
    }

    // move the entities
    for(let i = 0; i < theEntities.length; i++) {

      let transform = theEntities[i].getComponent(Transform)

      let movementDistance = (theRadios[i] + tileHeight / 2.0) / 25.0

      // for the 25 steps from step = 0 to step = 24, move up
      if(step < 25) {
        distance = Vector3.Up().scale(movementDistance)
      }
      // for the 50 steps from step = 25 to step = 74, move down
      if(step >= 25 && step < 75) {
        distance = Vector3.Down().scale(movementDistance)
      }
      // for the 25 steps from step = 75 to step = 99, move up
      if(step >= 75) {     
        distance = Vector3.Up().scale(movementDistance)        
      }      
      transform.translate(distance)
    }

    // incremenet step
    step += 1

  }
  
}

function showNft() {
  // see: https://docs.decentraland.org/blockchain-interactions/display-a-certified-nft/
  const entity = new Entity()
  const shapeComponent = new NFTShape('ethereum://0x06012c8cf97BEaD5deAe237070F9587f8E7A266d/558536')
  entity.addComponent(shapeComponent)
  entity.addComponent(
    new Transform({
      position: new Vector3(8, 0.5, 8)
    })
  )
  engine.addEntity(entity)  
}

function buildStepDecorator(blockNumber, tileWidth, x, y, z, stepNumber, index, movement?: boolean) {
  console.log('build step decorator', x, y, z, stepNumber, index, movement)

  // use index for the radio
  const radio = (tileWidth * 0.25) * ((index + 1)/ 5.0)

  // use same decorator color as buildings artwork (maybe refactor if we keep this?)
  const decoratorColors = ['#ffffa0', '#ffa0ff', '#a0ffff', '#ffa0a0', '#a0ffc0', '#a0a0ff', '#a0a0a0']
  let decoratorColorHex = decoratorColors[index % (decoratorColors.length - 1)]
  let decoratorMaterial = new Material()
  decoratorMaterial.hasAlpha = false
  decoratorMaterial.albedoColor = Color3.FromHexString(decoratorColorHex)

  // set a bunch of other material properties e.g.:
  // emissiveColor: The color emitted from the material.
  // ambientColor: AKA Diffuse Color in other nomenclature.
  // reflectionColor: The color reflected from the material.
  // reflectivityColor: AKA Specular Color in other nomenclature.

  decoratorMaterial.metallic = 0.2
  decoratorMaterial.roughness = 0

  // decoratorMaterial.emissiveColor = Color3('#000000')
  // decoratorMaterial.ambientColor = Color3('#000000')
  // decoratorMaterial.reflectionColor = Color3('#000000')
  // decoratorMaterial.reflectivityColor = Color3('#ffffff')

  let sphere = new Entity()
  sphere.addComponent(decoratorMaterial)
  sphere.addComponent(new SphereShape())
  sphere.addComponent(new Transform({
    scale: new Vector3(radio, radio, radio),
    position: new Vector3(
      x, 
      y, 
      z
    )
  }))  
  engine.addEntity(sphere)

  if(movement) {
    theEntities.push(sphere)
    theRadios.push(radio)
  }

  // handle click event
  sphere.addComponent(
    new OnClick(e => {

      console.log("sphere clicked entering event", puzzleAccumulatedClicks, "total", puzzleAccumulatedTotal, "number", stepNumber)

      // set timer start if not yet set
      if(!timerStart) {
        timerStart = Date.now()
      }

      puzzleAccumulatedTotal = stepNumber * Math.pow(64, puzzleAccumulatedClicks) + puzzleAccumulatedTotal
      puzzleAccumulatedClicks = puzzleAccumulatedClicks + 1        

      console.log("sphere calculated event", puzzleAccumulatedClicks, "total", puzzleAccumulatedTotal, "number", stepNumber)

      // check for win / loss
      if(puzzleAccumulatedTotal > blockNumber) {
        uText.value = 'Sorry, that\'s too far (' + puzzleAccumulatedTotal + ')! Puzzle restarted - click on a sphere to go again.'
        puzzleAccumulatedTotal = 0
        puzzleAccumulatedClicks = 0
        timerStart = null
      } else {
        if(puzzleAccumulatedTotal === blockNumber) {
          let timeElapsedInMilliseconds = Date.now() - timerStart
          uText.value = 'Congratulations. You\'ve solved the puzzle (' + puzzleAccumulatedTotal + ') in ' + (timeElapsedInMilliseconds / 1000.0).toFixed(2) + ' seconds! You can now verify ownership of this park scene by checking out the NFT at the bottom center of the park.'
          puzzleAccumulatedTotal = 0 
          puzzleAccumulatedClicks = 0   
          showNft()
          timerStart = nil
        } else {
          if(puzzleAccumulatedTotal < blockNumber) {
            uText.value = 'Hmm... keep going... (' + puzzleAccumulatedTotal + ')'
          }        
        }
      }

      console.log("sphere clicked exiting event", puzzleAccumulatedClicks, "total", puzzleAccumulatedTotal, "number", stepNumber)

    })
  )
  
}

function parkStepColor(parkNumber, stepHexDigit, stepNumber) {

  let parkRed = 0
  let parkGreen = 0
  let parkBlue = 0
  let stepRed = 0
  let stepGreen = 0
  let stepBlue = 0
  let numberOfParks = 25.0
  let stepDecimal = parseInt('0x' + stepHexDigit, 16)

  // parks 1 through 8 are blue-ish with a little green and increasingly red with height
  if(parkNumber >= 1 && parkNumber <= 8) {
    parkBlue = parkNumber / 8.0
    stepBlue = (stepDecimal + 1) / 16.0

    parkGreen = 0
    stepGreen = ((stepDecimal + 1) / 16.0) / 2.0

    parkRed = 0
    stepRed = stepNumber / 64.0    
  }
  // parks 9 through 16 are red-ish with a little blue and increasingly green with height
  if(parkNumber >= 9 && parkNumber <= 16) {
    parkRed = (parkNumber - 8) / 8.0
    stepRed = (stepDecimal + 1) / 16.0

    parkBlue = 0
    stepBlue = ((stepDecimal + 1) / 16.0) / 2.0

    parkGreen = 0
    stepGreen = stepNumber / 64.0

    
  }
  // parks 17 through 24 are green-ish with a little red and increasingly blue with height
  if(parkNumber >= 17 && parkNumber <= 24) {
    parkGreen = (parkNumber - 16) / 8.0
    stepGreen = (stepDecimal + 1) / 16.0

    parkRed = 0
    stepRed = ((stepDecimal + 1) / 16.0) / 2.0
    
    parkBlue = 0
    stepBlue = stepNumber / 64.0
  }  

  // park 25 has special lighter color palette that gets closer to white towards the top
  if(parkNumber == 25) {

    // the letter / step positioning dictates the amount of red
    parkRed = 0
    stepRed = ((stepDecimal + 1) / 16.0) * 2  

    // the step number dictates the amount of green and blue
    parkGreen = 0
    stepGreen = stepNumber / 64.0 * 2
    parkBlue = 0
    stepBlue = stepNumber / 64.0 * 2
  }    
  return new Color3((parkRed + stepRed) / 2.0, (parkGreen + stepGreen) / 2.0, (parkBlue + stepBlue) / 2.0)
}

function buildStep(parkNumber, blockNumber, stepNumber, previousStepHexDigit, stepHexDigit, currentHeight, smallConcept, puzzleMode, base64BlockNumberArray?: number[], movement?: boolean) {

  let artWidth = 8
  const xBase = 4
  const zBase = 4
  let lastStepWidth = 0.5
  let tileWidth = artWidth / 4.0
  let tileLength = tileWidth
  //let tileHeight = 0.05

  let stepDecimal = parseInt('0x' + stepHexDigit, 16)
  let previousStepDecimal = parseInt('0x' + previousStepHexDigit, 16)

  // console.log(
  //   'stepNumber', stepNumber, 
  //   'stepHexDigit', stepHexDigit, 
  //   'stepDecimal', stepDecimal, 
  //   'previousStepHexDigit', previousStepHexDigit, 
  //   'previousStepDecimal', previousStepDecimal, 
  // )
  
  // add the color
  let stepMaterial = new Material()
  stepMaterial.hasAlpha = false
  stepMaterial.albedoColor = parkStepColor(parkNumber, stepHexDigit, stepNumber)

  let stepHeight = 0
  if(smallConcept) {
    stepHeight = 0.3
  } else {
    stepHeight = 1
  }

  currentHeight += stepHeight
  
  // map the stepDecimal [0, 15] to a 4x4 with (x,z) pair coordinates
  let x = stepDecimal % 4
  let z = Math.floor(stepDecimal / 4.0)
  
  // add the step
  let tile = new Entity()
  tile.addComponent(stepMaterial)
  tile.addComponent(new BoxShape())
  tile.addComponent(new Transform({
    scale: new Vector3(tileWidth, tileHeight, tileLength),
    position: new Vector3(
      xBase + tileWidth * x + tileWidth / 2.0,
      currentHeight + tileHeight / 2.0, 
      zBase + tileLength * z + tileLength / 2.0
    )
  }))
  engine.addEntity(tile)

  // add the tile to the array of entities to be moved
  // if(movement) {
  //   theEntities.push(tile)
  // }

  // build the legs

  if(!smallConcept) {
    
    let legWidth = 0.01
    let legLength = 0.01    
    let legHeight = currentHeight
    let legMargin = tileWidth * 0.2

    let legSouthWest = new Entity()
    legSouthWest.addComponent(legMaterial)
    legSouthWest.addComponent(new BoxShape())
    legSouthWest.addComponent(new Transform({
      scale: new Vector3(legWidth, legHeight, legLength),
      position: new Vector3(
        xBase + tileWidth * x + legWidth / 2.0 + legMargin,
        legHeight / 2.0, 
        zBase + tileLength * z + legLength / 2.0 + legMargin
      )
    }))
    engine.addEntity(legSouthWest)

    let legNorthEast = new Entity()
    legNorthEast.addComponent(legMaterial)
    legNorthEast.addComponent(new BoxShape())
    legNorthEast.addComponent(new Transform({
      scale: new Vector3(legWidth, legHeight, legWidth),
      position: new Vector3(
        xBase + tileWidth * (x + 1) - legWidth / 2.0 - legMargin, 
        legHeight / 2.0, 
        zBase + tileLength * (z + 1) - legLength / 2.0 - legMargin
      )
    }))
    engine.addEntity(legNorthEast)

  } else {

    let legWidth = 0.03
    let legLength = 0.03
    let legHeight = currentHeight
    let legCenter = new Entity()
    let xCoord = xBase + tileWidth * x + tileWidth / 2.0 + legWidth / 2.0
    let zCoord = zBase + tileLength * z + tileLength / 2.0 + legLength / 2.0
    legCenter.addComponent(legMaterial)
    legCenter.addComponent(new BoxShape())
    legCenter.addComponent(new Transform({
      scale: new Vector3(legWidth, legHeight, legLength),
      position: new Vector3(
        xCoord,
        legHeight / 2.0, 
        zCoord
      )
    }))
    engine.addEntity(legCenter)

    if(puzzleMode) {
      uText.value = 'Welcome to park #' + parkNumber + '. To solve the puzzle, encode the block number (' + blockNumber + ') by clicking on the spheres in the right order.'

      // add a decoration if step number belongs to the base 64 representation of blockNumber
      for(let index = 0; index < base64BlockNumberArray.length; index++) {
        if(base64BlockNumberArray[index] === stepNumber) {
          buildStepDecorator(blockNumber, tileWidth, xCoord, currentHeight, zCoord, stepNumber, index, movement)
        }
      }  
    }
  }

  return currentHeight
}

function buildClimbingArtwork(parkNumber: number, blockNumber: number, hash: string, smallConcept: boolean, puzzleMode: boolean, base64BlockNumberArray?: number[], movement?: boolean) {
  let currentHeight = 0
  for(let i = 0; i < 64; i++) {
    let currentHash = hash[i]
    let previousHash = (i == 0 ? hash[63] : hash[i - 1])
    currentHeight = buildStep(parkNumber, blockNumber, i, previousHash, currentHash, currentHeight, smallConcept, puzzleMode, base64BlockNumberArray, movement)
  }

  // prepare base path colors and base bench colors
  let pathBaseColor = null
  let benchBaseColor  null
  
  // parks 1 through 8 are blue-ish with a little green and increasingly red with height
  if(parkNumber >= 1 && parkNumber <= 8) {
    pathBaseColor = Color3.Yellow()
    benchBaseColor = Color3.Green()
  }
  // parks 9 through 16 are red-ish with a little blue and increasingly green with height
  if(parkNumber >= 9 && parkNumber <= 16) {
    pathBaseColor = Color3.Yellow()
    benchBaseColor = Color3.Blue()
  }
  // parks 17 through 24 are green-ish with a little red and increasingly blue with height
  if(parkNumber >= 17 && parkNumber <= 24) {
    pathBaseColor = Color3.Blue()
    benchBaseColor = Color3.Red()    
  }  

  // park 25 has special lighter color palette that gets closer to white towards the top
  if(parkNumber == 25) {
    pathBaseColor = Color3.Yellow()
    benchBaseColor = Color3.Green()
  }    

  // paths
  let pathColors = []

  // west path uses step 8 color
  pathColors[0] = Color3.Lerp(pathBaseColor, parkStepColor(parkNumber, '8', 0), 0.8)
  
  // north 1 and 2 path use step d color
  pathColors[1] = Color3.Lerp(pathBaseColor, parkStepColor(parkNumber, 'd', 22), 0.8)
  pathColors[2] = pathColors[1]

  // east path 1 and 2 use step b color
  pathColors[3] = Color3.Lerp(pathBaseColor, parkStepColor(parkNumber, 'b', 43), 0.8)
  pathColors[4] = pathColors[3]

  // south path 1, 2, and 3 use step 2 color
  pathColors[5] = Color3.Lerp(pathBaseColor, parkStepColor(parkNumber, '2', 63), 0.8)
  pathColors[6] = pathColors[5]
  pathColors[7] = pathColors[5]

  <% paths.forEach(function(path, index) { %>

  <% if(index == 0) { %>
    engine.addEntity(buildPathWithColor3(<%= path.width %>, <%= path.height %>, <%= path.length %>, <%= path.x %>, <%= path.y %>, <%= path.z %>, <%= path.angle %>, pathColors[<%= index %>], "<%= parkData.name %>\n\n<%= parkData.description %>"))
  <% } else { %>
    engine.addEntity(buildPathWithColor3(<%= path.width %>, <%= path.height %>, <%= path.length %>, <%= path.x %>, <%= path.y %>, <%= path.z %>, <%= path.angle %>, pathColors[<%= index %>]))
  <% } %>

  <% }) %>

  // benches
  let benchColors = []

  // west bench uses step 8 color
  benchColors[0] = Color3.Lerp(benchBaseColor, parkStepColor(parkNumber, '8', 0), 0.8)
  // north bench uses step d color
  benchColors[1] = Color3.Lerp(benchBaseColor, parkStepColor(parkNumber, 'd', 22), 0.8)
  // east bench uses step b color
  benchColors[2] = Color3.Lerp(benchBaseColor, parkStepColor(parkNumber, 'b', 43), 0.8)
  // south bench uses step 2 color
  benchColors[3] = Color3.Lerp(benchBaseColor, parkStepColor(parkNumber, '2', 63), 0.8)

  <% benches.forEach(function(bench, index) { %>

  engine.addEntity(buildBenchWithColor3(<%= bench.x %>, <%= bench.y %>, <%= bench.z %>, <%= bench.angle %>, benchColors[<%= index %>]))

  <% }) %>  

  if(movement) {
    engine.addSystem(new SimpleMove())
  }
}
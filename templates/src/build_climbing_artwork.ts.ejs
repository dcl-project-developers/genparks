/// ---- CLIMBING ----
// Concept: use steps to build a climbing structure

// the puzzle version of CLIMBING is concept #11 - adds decorators and click event handling with puzzle accounting
let puzzleAccumulatedTotal = 0
let puzzleAccumulatedClicks = 0

// Create UI canvas and text
const uCanvas = new UICanvas() 
const uText = new UIText(uCanvas)

let legMaterial = new Material()
legMaterial.hasAlpha = false
legMaterial.metallic = 1
legMaterial.roughness = 1
legMaterial.emissiveColor = Color3.FromHexString('#a0a0a0')
legMaterial.ambientColor = Color3.FromHexString('#ffffff')
legMaterial.reflectionColor = Color3.FromHexString('#ffffff')
legMaterial.albedoColor = Color3.FromHexString('#ffffff')

function buildStepDecorator(blockNumber, tileWidth, x, y, z, stepNumber, index) {
  console.log('build step decorator', x, y, z, stepNumber, index)

  // use index for the radio
  const radio = (tileWidth * 0.25) * ((index + 1)/ 5.0)

  // use same decorator color as buildings artwork (maybe refactor if we keep this?)
  const decoratorColors = ['#ffffa0', '#ffa0ff', '#a0ffff', '#ffa0a0', '#a0ffc0', '#a0a0ff', '#a0a0a0']
  let decoratorColorHex = decoratorColors[index % (decoratorColors.length - 1)]
  let decoratorMaterial = new Material()
  decoratorMaterial.hasAlpha = false
  decoratorMaterial.albedoColor = Color3.FromHexString(decoratorColorHex)

  // set a bunch of other material properties e.g.:
  // emissiveColor: The color emitted from the material.
  // ambientColor: AKA Diffuse Color in other nomenclature.
  // reflectionColor: The color reflected from the material.
  // reflectivityColor: AKA Specular Color in other nomenclature.

  decoratorMaterial.metallic = 0.2
  decoratorMaterial.roughness = 0

  // decoratorMaterial.emissiveColor = Color3('#000000')
  // decoratorMaterial.ambientColor = Color3('#000000')
  // decoratorMaterial.reflectionColor = Color3('#000000')
  // decoratorMaterial.reflectivityColor = Color3('#ffffff')

  let sphere = new Entity()
  sphere.addComponent(decoratorMaterial)
  sphere.addComponent(new SphereShape())
  sphere.addComponent(new Transform({
    scale: new Vector3(radio, radio, radio),
    position: new Vector3(
      x, 
      y, 
      z
    )
  }))  
  engine.addEntity(sphere)

  // handle click event
  sphere.addComponent(
    new OnClick(e => {

      console.log("sphere clicked entering event", puzzleAccumulatedClicks, "total", puzzleAccumulatedTotal, "number", stepNumber)

      puzzleAccumulatedTotal = stepNumber * Math.pow(64, puzzleAccumulatedClicks) + puzzleAccumulatedTotal
      puzzleAccumulatedClicks = puzzleAccumulatedClicks + 1        

      console.log("sphere calculated event", puzzleAccumulatedClicks, "total", puzzleAccumulatedTotal, "number", stepNumber)

      // check for win / loss
      if(puzzleAccumulatedTotal > blockNumber) {
        puzzleAccumulatedTotal = 0
        puzzleAccumulatedClicks = 0
        uText.value = 'Game over, restarting puzzle! (' + puzzleAccumulatedTotal + ')'  
      } else {
        if(puzzleAccumulatedTotal === blockNumber) {
          uText.value = 'Congratulations. You\'ve solved the puzzle! (' + puzzleAccumulatedTotal + '). Go again?'
          puzzleAccumulatedTotal = 0 
          puzzleAccumulatedClicks = 0   
        } else {
          if(puzzleAccumulatedTotal < blockNumber) {
            uText.value = 'Hmm... keep going... (' + puzzleAccumulatedTotal + ')'
          }        
        }
      }

      console.log("sphere clicked exiting event", puzzleAccumulatedClicks, "total", puzzleAccumulatedTotal, "number", stepNumber)

    })
  )
  
}


function buildStep(blockNumber, stepNumber, previousStepHexDigit, stepHexDigit, currentHeight, smallConcept, puzzleMode, base64BlockNumberArray?: number[]) {

  let artWidth = 8
  const xBase = 4
  const zBase = 4
  let lastStepWidth = 0.5
  let tileWidth = artWidth / 4.0
  let tileLength = tileWidth
  let tileHeight = 0.05

  let stepDecimal = parseInt('0x' + stepHexDigit, 16)
  let previousStepDecimal = parseInt('0x' + previousStepHexDigit, 16)

  // console.log(
  //   'stepNumber', stepNumber, 
  //   'stepHexDigit', stepHexDigit, 
  //   'stepDecimal', stepDecimal, 
  //   'previousStepHexDigit', previousStepHexDigit, 
  //   'previousStepDecimal', previousStepDecimal, 
  // )
  
  // calculate color
  let colorHex = '#' + stepHexDigit + '0' + stepHexDigit + '0' + stepHexDigit + '0'

  // console.log('Color: ', colorHex)

  // add the color
  let stepMaterial = new Material()
  stepMaterial.hasAlpha = false
  stepMaterial.albedoColor = Color3.FromHexString(colorHex)

  let stepHeight = 0
  if(smallConcept) {
    stepHeight = 0.3
  } else {
    stepHeight = 1
  }

  currentHeight += stepHeight
  
  // map the stepDecimal [0, 15] to a 4x4 with (x,z) pair coordinates
  let x = stepDecimal % 4
  let z = Math.floor(stepDecimal / 4.0)
  
  // add the step
  let tile = new Entity()
  tile.addComponent(stepMaterial)
  tile.addComponent(new BoxShape())
  tile.addComponent(new Transform({
    scale: new Vector3(tileWidth, tileHeight, tileLength),
    position: new Vector3(
      xBase + tileWidth * x + tileWidth / 2.0,
      currentHeight + tileHeight / 2.0, 
      zBase + tileLength * z + tileLength / 2.0
    )
  }))
  engine.addEntity(tile)

  // build the legs

  if(!smallConcept) {
    
    let legWidth = 0.01
    let legLength = 0.01    
    let legHeight = currentHeight
    let legMargin = tileWidth * 0.2

    let legSouthWest = new Entity()
    legSouthWest.addComponent(legMaterial)
    legSouthWest.addComponent(new BoxShape())
    legSouthWest.addComponent(new Transform({
      scale: new Vector3(legWidth, legHeight, legLength),
      position: new Vector3(
        xBase + tileWidth * x + legWidth / 2.0 + legMargin,
        legHeight / 2.0, 
        zBase + tileLength * z + legLength / 2.0 + legMargin
      )
    }))
    engine.addEntity(legSouthWest)

    let legNorthEast = new Entity()
    legNorthEast.addComponent(legMaterial)
    legNorthEast.addComponent(new BoxShape())
    legNorthEast.addComponent(new Transform({
      scale: new Vector3(legWidth, legHeight, legWidth),
      position: new Vector3(
        xBase + tileWidth * (x + 1) - legWidth / 2.0 - legMargin, 
        legHeight / 2.0, 
        zBase + tileLength * (z + 1) - legLength / 2.0 - legMargin
      )
    }))
    engine.addEntity(legNorthEast)

  } else {

    let legWidth = 0.03
    let legLength = 0.03
    let legHeight = currentHeight
    let legCenter = new Entity()
    let xCoord = xBase + tileWidth * x + tileWidth / 2.0 + legWidth / 2.0
    let zCoord = zBase + tileLength * z + tileLength / 2.0 + legLength / 2.0
    legCenter.addComponent(legMaterial)
    legCenter.addComponent(new BoxShape())
    legCenter.addComponent(new Transform({
      scale: new Vector3(legWidth, legHeight, legLength),
      position: new Vector3(
        xCoord,
        legHeight / 2.0, 
        zCoord
      )
    }))
    engine.addEntity(legCenter)

    if(puzzleMode) {
      // add a decoration if step number belongs to the base 64 representation of blockNumber
      for(let index = 0; index < base64BlockNumberArray.length; index++) {
        if(base64BlockNumberArray[index] === stepNumber) {
          buildStepDecorator(blockNumber, tileWidth, xCoord, currentHeight, zCoord, stepNumber, index)
        }
      }  
    }
  }

  return currentHeight
}

function buildClimbingArtwork(blockNumber: number, hash: string, smallConcept: boolean, puzzleMode: boolean, base64BlockNumberArray?: number[]) {
  let currentHeight = 0
  for(let i = 0; i < 64; i++) {
    let currentHash = hash[i]
    let previousHash = (i == 0 ? hash[63] : hash[i - 1])
    currentHeight = buildStep(blockNumber, i, previousHash, currentHash, currentHeight, smallConcept, puzzleMode, base64BlockNumberArray)
  }
}
/// ---- PYRAMID ----
// Concept: use cubes to build ...

function buildStep(blockNumber, stepNumber, stepHexDigit, drawSubsteps) {

  let artWidth = 8
  const xBase = 8
  const zBase = 8
  let topStepWidth = 0.5
  let stepWidth = (artWidth - topStepWidth) / 64.0

  console.log('Step number', stepNumber, 'Step hex: ', stepHexDigit)

  let stepDecimal = parseInt('0x' + stepHexDigit, 16)
  
  let stepHeight = 0.15
  // let stepHeight = (stepDecimal + 1)/ 32.0 // hex digit translated to [1/32, 0.5]

  console.log('stepHeight', stepHeight, 'decimal', stepDecimal)
  
  // calculate color
  let colorHex = '#' + stepHexDigit + '0' + stepHexDigit + '0' + stepHexDigit + '0'

  console.log('Color: ', colorHex)

  // add the color
  let stepMaterial = new Material()
  stepMaterial.hasAlpha = false
  stepMaterial.albedoColor = Color3.FromHexString(colorHex)

  // add the step
  let step = new Entity()
  let thisStepWidth = (64 - stepNumber) * stepWidth
  step.addComponent(stepMaterial)
  step.addComponent(new BoxShape())
  step.addComponent(new Transform({
    scale: new Vector3(thisStepWidth, stepHeight, thisStepWidth),
    position: new Vector3(
      xBase, 
      stepHeight * stepNumber + stepHeight / 2.0, 
      zBase
  }))

  // render the cube
  engine.addEntity(step)

  if(drawSubsteps) {
    // add the sub-steps decorations
    let subStepHexDigit = stepHexDigit
    let subStepDecimal = parseInt('0x' + subStepHexDigit, 16)
    let subStepWidth = stepWidth / 2.0
    let subStepHeight = stepHeight / 2.0

    console.log('sub-step hex', subStepHexDigit, 'subStepWidth', subStepWidth, 'subStepHeight', subStepHeight, 'subStepDecimal', subStepDecimal)

    // calculate sub-step color as quick bit complement from color hex
    let subColorHex = colorHex

    console.log('sub-step color', subColorHex)

    // add the sub-steps color
    let subStepMaterial = new Material()
    subStepMaterial.hasAlpha = false
    subStepMaterial.albedoColor = Color3.FromHexString(subColorHex)

    // substeps start at the southwest corner and go clock-wise with up to 4 per side
    subStepDecimal = subStepDecimal + 1 // we want from 1-16 substeps not 0-15 substeps
    let margin = thisStepWidth / 8.0
    for(let i = 0; i < subStepDecimal; i++) {
      let baseDelta = thisStepWidth / 2.0 + subStepWidth / 2.0
      let subStep = new Entity()
      subStep.addComponent(subStepMaterial)
      subStep.addComponent(new BoxShape())
      // west 4
      if(i < 4) {
        let index = i
        let x = xBase - baseDelta
        let z = zBase - baseDelta + margin + (index + 0.5) * ((thisStepWidth - margin * 2)/4.0)
      } 
      // north 4
      if(i >= 4 && i < 8) {
        let index = i - 4
        let x = xBase - baseDelta + margin + (index + 0.5) * ((thisStepWidth - margin * 2)/4.0)
        let z = zBase + baseDelta
      }
      // east 4
      if(i >= 8 && i < 12) {
        let index = i - 8
        let x = xBase + baseDelta
        let z = zBase + baseDelta - margin - (index + 0.5) * ((thisStepWidth - margin * 2)/4.0)
      }    
      // south 4
      if(i >= 12 && i < 16) {
        let index = i - 12
        let x = xBase + baseDelta - margin - (index + 0.5) * ((thisStepWidth - margin * 2)/4.0)
        let z = zBase - baseDelta
      }        
      subStep.addComponent(new Transform({
        scale: new Vector3(subStepWidth, subStepHeight, subStepWidth),
        position: new Vector3(
          x, 
          stepHeight * stepNumber + stepHeight / 2.0, 
          z
      }))

      // render the sub step
      engine.addEntity(subStep)  

    }

  }
}

function buildPyramidArtwork(blockNumber: number, hash: string, drawSubsteps: boolean) {
  for(let i = 0; i < 64; i++) {
    buildStep(blockNumber, i, hash[i], drawSubsteps)
  }
}